openapi: 3.0.3
info:
  title: Game Score Manager API
  version: 1.3.9
  description: The Score Management System project is a full-stack web application that allows players to manage and display scores for an online video game. Players will be able to register on the platform, log in, and their scores will be automatically recorded when they play. The highest scores will be displayed in a global ranking. Administrators will be able to manage the scores and user content from an administration panel.
  contact:
    email: camilo.quirogam@gmail.com
    name: Camilo Quiroga - Talento Tech FullStack project 2024
    url: https://github.com/orgs/DWFSH3-178/repositories
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: Authentication
    description: Domain about security and users authentication
  - name: Users
    description: Domain about users data
  - name: Scores
    description: Domain about game scores data
paths:
  /users/auth/register:
    post:
      summary: Create User (Register)
      tags: 
        - Authentication
      description: Creates an user with email, name, username and password
      operationId: userRegister
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        200:
          description: User created successfully
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserRegisterResponse'
        400:
          description: User Bad Request
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse400'
        409:
          description: User Conflict
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse409'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/auth/login:
    post:
      summary: Login user (Auth)
      tags:
        - Authentication
      description: Authenticate user with email and password
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        200:
          description: User Login successfull
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserLoginResponse' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/profile/{userid}:
    get:
      summary: Get detailed data of user
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Get detailed data of user
      operationId: getUserById
      parameters: 
        - in: path
          name: userid
          schema:
            type: string
          required: true
          description: uuid of the user required
      responses:
        200:
          description: User data
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserDetails' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse401' 
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/session/{userId}:
    get:
      summary: Verify user session
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Verify ifuser sessionis active
      operationId: getUserSessionId
      parameters: 
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: uuid of the user required
      responses:
        200:
          description: Session of User status
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserSessionDetails' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse401' 
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/profile/{userId}:
    put:
      summary: Update user
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Alter data for user
      operationId: userUpdate
      parameters: 
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: uuid of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: user information successfully modified
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserDetails' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/admin/profile/{userId}:
    put:
      summary: Update user as Admin
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Alter data for user as Admin permissions
      operationId: userAdminUpdate
      parameters: 
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: uuid of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminUpdateRequest'
      responses:
        200:
          description: user information successfully modified
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserDetails' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/admin:
    get:
      summary: Get the list of all players as Admin
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Get the list of all players with admin permissions
      operationId: getAllUsersAdmin
      parameters:
        - name: limit
          in: query
          required: false
          description: " Users for page"
          schema:
            type: integer
            example: 20
        - name: page
          in: query
          required: false
          description: "Number of actual page"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Paginate list of detailed users
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/admin/{userid}:
    patch:
      summary: Block or Unblock an User as Admin
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Block or Unblock an User with his UUID as admin permissions
      operationId: blockUserAdmin
      parameters: 
        - in: path
          name: userid
          required: true
          description: Uuid of user to be blocked
          schema: 
            type: string
      
      responses:
        204: 
          description: User Blocked / Unblocked
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /users/admin/{userId}:
    get:
      summary: Get detailed data of user as Admin
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Get detailed data of user with admin permissions
      operationId: getuserByIdAdmin
      parameters: 
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: uuid of the user required
      responses:
        200:
          description: User data
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/UserDetails' 
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse401' 
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/{scoreId}:
    get:
      summary: Get One Score
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Get scores of user given uuid
      operationId: getScoreById
      parameters: 
        - in: path
          name: scoreId
          schema:
            type: string
          required: true
          description: uuid of the user required
      responses:
        200:
          description: User data
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ScoresResponse'
        400:
          description: User bad request
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse400' 
        401:
          description: Unauthorized
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse401' 
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores:
    post:
      summary: Create a score to an User
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Create a score and relationates it to an User
      operationId: createScore
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScore'
      responses:
        204: 
          description: Score created successfully
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CreateScoreResponse'
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/admin/{scoreId}:
    patch:
      summary: Block or Unblock an Score as Admin
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Block or Unblock an Score with his UUID as admin permissions
      operationId: blockScoreByIdAdmin
      parameters: 
        - in: path
          name: scoreId
          required: true
          description: Uuid of score to be blocked
          schema: 
            type: string
      responses:
        204: 
          description: Score Blocked / Unblocked
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/admin/{scoreid}:
    put:
      summary:  Update data for one score as Admin permissions
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Block or Unblock an Score with his UUID
      operationId: UpdateScoreAdmin
      parameters: 
        - in: path
          name: scoreid
          required: true
          description: Uuid of score to be blocked
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScore'
      responses:
        204: 
          description: Score Blocked / Unblocked
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ScoresResponse'
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/{scoreid}:
    put:
      summary: Update data for one score
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Update data for one score
      operationId: UpdateScore
      parameters: 
        - in: path
          name: scoreid
          required: true
          description: Uuid of score to be blocked
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScore'
      responses:
        204: 
          description: Score Blocked / Unblocked
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ScoresResponse'
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/leaderboard:
    get:
      summary: Get the list of best players
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Get the list of best player in order of higher to lower scores
      operationId: getScoresLeaderboard
      parameters:
        - name: limit
          in: query
          required: false
          description: " Scores for page"
          schema:
            type: integer
            example: 20
        - name: page
          in: query
          required: false
          description: "Number of actual page"
          schema:
            type: integer
            example: 1
      responses:
        200: 
          description: List users with highest scores
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
  /scores/admin:
    get:
      summary: Get the list of All Scores as Admin
      security:
        - bearerAuth: []
      tags:
        - Scores
      description: Get the list of best player in order of higher to lower scores with Admin permissions
      operationId: getAllScoresAdmin
      parameters:
        - name: limit
          in: query
          required: false
          description: " Scores for page"
          schema:
            type: integer
            example: 20
        - name: page
          in: query
          required: false
          description: "Number of actual page"
          schema:
            type: integer
            example: 1
      responses:
        200: 
          description: List users with highest scores
        401:
          description: Unauthorized
          content:
            application/json: 
               schema: 
                $ref: '#/components/schemas/ErrorResponse401'
        500:
          description: Internal server error
          content:
            application/json: 
              schema: 
                $ref:  '#/components/schemas/ErrorResponse500'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      properties:
        name:
          type: string
          example: "Jhon Doe Doe"
        userName:
          type: string
          example: "JhonDoe123"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"  
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
        role:
          type: string
          example: "Player"
        avatar:
          type: string
          example: "https://gameScores/johndoeAvatar.webp"
    UserRegisterResponse:
      type: object
      properties:
        userId:
          type: string
          example: "a23e4567-e89b-12d3-a456-426614174009"
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe123"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"  
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
        role:
          type: string
          example: "Player"
        avatar:
          type: string
          example: "https://gameScores/johndoeAvatar.webp"
        isActive:
          type: boolean
          example: true
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe123"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"  
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
        avatar:
          type: string
          example: "https://gameScores/jhonDoeAvatar.webp"
    UserAdminUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe123"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"  
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
        avatar:
          type: string
          example: "https://gameScores/jhonDoeAvatar.webp"
        role:
          type: string
          example: "Admin"
        isActive:
          type: boolean
          example: false
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "JhonDoe@gmail.com"
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
    UserLoginResponse:
      type: object
      properties:
        userId:
          type: string
          example: "a23e4567-e89b-12d3-a456-426614174009"
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe123"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"  
        password:
          type: string
          format: password
          example: "JhonDoe123456*."
        role:
          type: string
          example: "Player"
        avatar:
          type: string
          example: "https://gameScores/johndoeAvatar.webp"
        isActive:
          type: boolean
          example: true
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    UserSummary:
      type: object
      properties:
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe"
        image:
          type: string
          example: "https://gameScores/jhonDoeAvatar.webp"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"
        highestScore:
          type: integer
          example: 152
    UserDetails:
      type: object
      properties:
        userId:
          type: string
          example: "223e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe"
        avatar:
          type: string
          example: "https://gameScores/jhonDoeAvatar.webp"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"
        role:
          type: string
          example: "Admin"
          description: Enum of existent roles
        isActive:
          type: boolean
          example: true
          
    UserSessionDetails:
      type: object
      properties:
        message:
          type: string
          example: "session logged in successfully"
        data:
          type: object
          properties:
            userId:
              type: string
              example: "12345"
            userName:
              type: string
              example: "johndoe"
            sessionToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR..."
            expiresAt:
              type: string
              format: date-time
              example: "2024-10-22T14:48:00.000Z"
              
    AllUsersDetails:
      type: object
      properties:
        userId:
          type: string
          example: "223e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          example: "Jhon Doe Doe"
        username:
          type: string
          example: "JhonDoe"
        avatar:
          type: string
          example: "https://gameScores/jhonDoeAvatar.webp"
        email:
          type: string
          format: email
          example: "jhonDoe@gmail.com"
        role:
          type: string
          example: "Admin"
          description: Enum of existent roles
        isActive:
          type: boolean
          example: true
          
    ScoresResponse:
      type: object
      properties:
        scoreId: 
          type: string
          example: 'a32759a4-b221-4a8c-829f-fc0bef74f36a'
        playerId: 
          type: string
          example: 'e7cc2543-3ff1-4939-90a3-efb3dee0699e'
        score::
          type: integer
          example: 20
        game::
          type: string
          example: 'Mario Bros!'
        createdAt::
          type: string
          example: '2022-02-02T21:12:34.000Z'
        isActive:
          type: boolean
          example: true
          
    CreateScore:
      type: object
      properties:
        playerId: 
          type: string
          example: 'uuid'
        score::
          type: integer
          example: 20
        game:
          type: string
          example: "Mario Bros!"
    
    CreateScoreResponse:
      type: object
      properties:
        scoreId: 
          type: string
          example: 'a32759a4-b221-4a8c-829f-fc0bef74f36a'
        playerId: 
          type: string
          example: 'e7cc2543-3ff1-4939-90a3-efb3dee0699e'
        score::
          type: integer
          example: 20
        game:
          type: string
          example: "Mario Bros!"
        createdAt::
          type: string
          example: '2022-02-02T21:12:34.000Z'
        isActive:
          type: boolean
          example: true
          
    UpdateScore:
      type: object
      properties:
        playerId: 
          type: string
          example: 'e7cc2543-3ff1-4939-90a3-efb3dee0699e'
        score::
          type: integer
          example: 20
        game:
          type: string
          example: "Mario Bros!"
    
    UpdateScoreResponse:
      type: object
      properties:
        scoreId: 
          type: string
          example: 'a32759a4-b221-4a8c-829f-fc0bef74f36a'
        playerId: 
          type: string
          example: 'e7cc2543-3ff1-4939-90a3-efb3dee0699e'
        score::
          type: integer
          example: 20
        game:
          type: string
          example: "Mario Bros!"
        createdAt::
          type: string
          example: '2022-02-02T21:12:34.000Z'
        isActive:
          type: boolean
          example: true
          
    ErrorResponse400:
      type: object
      properties:
        message: 
          type: string
          example: 'Invalid Data'
        statusCode:
          type: integer
          example: 400
    ErrorResponse401:
      type: object
      properties:
        message: 
          type: string
          example: 'Unauthorized'
        statusCode:
          type: integer
          example: 401
    ErrorResponse409:
      type: object
      properties:
        message: 
          type: string
          example: 'User Already Exists'
        statusCode:
          type: integer
          example: 409
    ErrorResponse500:
      type: object
      properties:
        message:
          type: string
          example: "Server error"
        statusCode:
          type: integer
          example: 500
